"""
Export helpers for MARS (Modal Analysis Response Solver).

Functions for exporting analysis results to CSV/APDL and related formats.
"""

import pandas as pd
import numpy as np
from typing import Optional, List, Dict


def export_to_csv(data: pd.DataFrame, filename: str) -> None:
    """
    Export a DataFrame to CSV format.
    
    Args:
        data: DataFrame to export.
        filename: Path to the output CSV file.
    """
    data.to_csv(filename, index=False)


def generate_apdl_ic(node_ids: np.ndarray, vel_x: np.ndarray, 
                    vel_y: np.ndarray, vel_z: np.ndarray) -> str:
    """
    Generate APDL initial condition commands from velocity data.
    
    This function wraps the legacy fea_utilities function but can be extended
    with additional functionality.
    
    Args:
        node_ids: Array of node numbers.
        vel_x: Array of velocities in the X direction.
        vel_y: Array of velocities in the Y direction.
        vel_z: Array of velocities in the Z direction.
    
    Returns:
        String containing the APDL IC commands, ready to be saved.
    """
    apdl_commands = [
        "! APDL Initial Condition (Velocity) Commands",
        "! Generated by MARS: Modal Analysis Response Solver",
        "! Velocity Units: [mm/s]",
        "FINISH",
        "/SOLU",
        "! Applying Initial Conditions for Velocity"
    ]
    
    # Iterate through each node and create the IC command for each velocity component
    for i, node in enumerate(node_ids):
        # Ensure values are flattened if they are in a column vector
        vx = vel_x.flatten()[i]
        vy = vel_y.flatten()[i]
        vz = vel_z.flatten()[i]
        apdl_commands.append(f"IC,{int(node)},VELX,{vx:.6E}")
        apdl_commands.append(f"IC,{int(node)},VELY,{vy:.6E}")
        apdl_commands.append(f"IC,{int(node)},VELZ,{vz:.6E}")
    
    apdl_commands.append("! End of Initial Conditions")
    
    # Join all commands into a single string with newlines
    return "\n".join(apdl_commands)


def export_apdl_ic(node_ids: np.ndarray, vel_x: np.ndarray, 
                   vel_y: np.ndarray, vel_z: np.ndarray, 
                   filename: str) -> None:
    """
    Export APDL initial condition commands to a file.
    
    Args:
        node_ids: Array of node numbers.
        vel_x: Array of velocities in the X direction.
        vel_y: Array of velocities in the Y direction.
        vel_z: Array of velocities in the Z direction.
        filename: Path to the output file.
    """
    apdl_commands = generate_apdl_ic(node_ids, vel_x, vel_y, vel_z)
    with open(filename, 'w') as f:
        f.write(apdl_commands)


def export_time_point_results(node_ids: np.ndarray, 
                              node_coords: np.ndarray,
                              scalar_data: np.ndarray,
                              scalar_name: str,
                              filename: str) -> None:
    """
    Export time point results to CSV format.
    
    Args:
        node_ids: Array of node IDs.
        node_coords: Array of node coordinates (n_nodes, 3).
        scalar_data: Scalar data at each node.
        scalar_name: Name of the scalar field.
        filename: Path to the output CSV file.
    """
    df_out = pd.DataFrame()
    
    if node_ids is not None:
        df_out['NodeID'] = node_ids
    
    if node_coords is not None:
        df_out['X'] = node_coords[:, 0]
        df_out['Y'] = node_coords[:, 1]
        df_out['Z'] = node_coords[:, 2]
    
    df_out[scalar_name] = scalar_data
    
    df_out.to_csv(filename, index=False)


def export_mesh_to_csv(mesh, scalar_name: str, filename: str) -> None:
    """
    Export PyVista mesh with scalar data to CSV.
    
    Args:
        mesh: PyVista mesh object with scalar data.
        scalar_name: Name of the active scalar field.
        filename: Path to the output CSV file.
    """
    coords = mesh.points
    scalar_data = mesh[scalar_name]
    
    df_out = pd.DataFrame()
    
    if 'NodeID' in mesh.array_names:
        df_out['NodeID'] = mesh['NodeID']
    
    df_out['X'] = coords[:, 0]
    df_out['Y'] = coords[:, 1]
    df_out['Z'] = coords[:, 2]
    df_out[scalar_name] = scalar_data
    
    df_out.to_csv(filename, index=False)


def export_results_with_headers(filename: str, node_ids: np.ndarray, 
                                node_coords: Optional[np.ndarray],
                                data: np.ndarray, header: str) -> None:
    """
    Export results to CSV with custom header.
    
    Args:
        filename: Path to the output CSV file.
        node_ids: Array of node IDs.
        node_coords: Optional array of node coordinates (n_nodes, 3).
        data: Data array to export.
        header: Header name for the data column.
    """
    df_out = pd.DataFrame({'NodeID': node_ids, header: data})
    
    if node_coords is not None:
        df_coords = pd.DataFrame(node_coords, columns=['X', 'Y', 'Z'])
        df_out = pd.concat([df_out, df_coords], axis=1)
    
    df_out.to_csv(filename, index=False)
